#!/bin/zsh
fpath=(~/.zsh $fpath)

function exists { which $1 &> /dev/null }

# Tmux configuration
if exists tmux && [[ -z $TERMINOLOGY && -z $TMUX && -z $NO_TMUX && -z $INSIDE_EMACS && (-z $SSH_CONNECTION || "$USER" == "vagrant") && -o interactive && -n $TERM && "$TERM" != "dumb" && "$TERM" != "linux" ]] ; then
    # Attach to existing session
    if tmux list-sessions > /dev/null 2>&1; then
        tmux attach
        exit
    else
        exec tmux
    fi
fi

# Executes the given command outside tmux, this is needed since tmux is started immediately
# on shell startup making it impossible to run a command without tmux
notmux () {
    local args

    for i in "$@" ; do
        args="$args '$i'"
    done

    if [[ -n $ROXTERM_PID ]] ; then
        roxterm --tab -e "export NO_TMUX=yes; $args"

    elif [[ "$COLORTERM" = "gnome-terminal" ]] || [[ -n "$VTE_VERSION" ]] ; then
        if exists xdotool ; then
            sh -c "xdotool key ctrl+shift+t && sleep 0.5 && tmux suspend && sleep 0.5 && xdotool type \"export NO_TMUX=yes ; cd $(pwd) && $args[0] $(print $args[1,-1]) ; exit\" && xdotool key Return" &!
        else
            echo "Please install xdotool for this command to work!"
        fi

    elif [[ "$TERM_PROGRAM" = "iTerm.app" ]] ; then
        script=$(cat <<EOF
tell application "iTerm"
    tell current window
         create tab with default profile command "zsh --login -c 'export NO_TMUX=yes ; cd \"$(pwd)\" && $args[0] $(print $args[1,-1]) ; exit'"
    end tell
end tell
EOF
                 )

        osascript -e "$script"

    fi
}


if [[ -f $HOME/software/zgen/zgen.zsh ]] ; then

    # Use different init file inside emacs
    if [[ -n $INSIDE_EMACS ]] ; then
        if test "${INSIDE_EMACS#*comint}" != "$INSIDE_EMACS" ; then
            ZGEN_INIT="$HOME/.zgen/init-comint.zsh"
        else
            ZGEN_INIT="$HOME/.zgen/init-emacs.zsh"
        fi
    fi

    source $HOME/software/zgen/zgen.zsh

    if ! zgen saved; then
        echo "Creating a zgen save"

        zgen oh-my-zsh

        # External plugins
        zgen load Tarrasch/zsh-bd
        zgen load marzocchi/zsh-notify
        zgen load Tarrasch/zsh-autoenv
        zgen load hlissner/zsh-autopair
        zgen load zsh-users/zsh-completions src

        # oh-my-zsh plugins
        zgen oh-my-zsh plugins/command-not-found
        zgen oh-my-zsh plugins/colored-man-pages

        # Theme
        zgen oh-my-zsh themes/ys

        # Do not load plugins that are irrelevant in Emacs shell
        if test "${INSIDE_EMACS#*comint}" = "$INSIDE_EMACS" ; then
            zgen load zsh-users/zsh-syntax-highlighting
            zgen load zsh-users/zsh-history-substring-search
        fi

        # Save all to init script
        zgen save
    fi

    # Disable zsh-notify if not in X or in SSHed machine
    [[ -z $DISPLAY || -n "$SSH_CLIENT" || -n "$SSH_TTY" ]] && notify-if-background() {}

    # Syntax highlighters to use
    ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern line)
fi

# Completion setup
# Enable bash completions
autoload bashcompinit
bashcompinit

# Use completions for exec command for notmux as well
compdef notmux=exec
compdef rlwrap=exec

# Enable zsh specific glob features
setopt extendedglob

# Disable bracketed paste mode in Emacs
if ! test "${INSIDE_EMACS#*comint}" = "$INSIDE_EMACS"; then
    # Set emacsclient to the editor
    export EDITOR=emacsclient

    # Disable bracketed paste. Credits: https://github.com/syl20bnr/spacemacs/issues/3035#issue-106437823
    unset zle_bracketed_paste
fi

# Better display of files with less
if exists less-input-preprocessor.sh ; then
    export LESSOPEN="| less-input-preprocessor.sh %s"
    export LESS="-R"
fi

# gpg configuration
export GPG_TTY=$(tty)

# Configuration for fzf
export FZF_DEFAULT_OPTS='--reverse --border'
export FZF_TMUX_HEIGHT='100%'

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Load sandboxd
[ -f ~/.sandboxd ] && source ~/.sandboxd 1>/dev/null 2>&1

# Configuration for autojump
[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] && source ~/.autojump/etc/profile.d/autojump.sh

# Redefine ajo function exported by autojump to jfm since it conflicts with the jo the program
typeset -f jo >/dev/null && eval "$(which jo| sed 's/^jo/ajo/')" && unset -f jo
typeset -f jco >/dev/null && eval "$(which jco| sed 's/^jco/ajco/'| sed 's/jo /ajo /')" && unset -f jco

# Snatch back some keybindings
bindkey '\ec' capitalize-word
bindkey '\el' down-case-word
bindkey '^T' transpose-chars

if [[ -f ~/.zshrc.local ]] ; then
    source ~/.zshrc.local
fi
