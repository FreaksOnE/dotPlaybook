// Allow for 'contrib' stuff
load_paths.unshift('chrome://conkeror-contrib/content/');

// Use tabs to represent buffers
require('new-tabs.js');

// Open buffers (tabs) in the background
require('clicks-in-new-buffer.js');

// Restore pages, when conkeror starts
require('session.js');
session_auto_save_auto_load = true;

define_key(default_global_keymap, 'M-f', 'follow-new-buffer');
define_key(default_global_keymap, 'C-M-f', 'follow-new-buffer-background');

// Display favicons in modeline
require('favicon.js');
add_hook('mode_line_hook', mode_line_adder(buffer_icon_widget), true);
read_buffer_show_icons = true;

// Highlight scrolling region, with semi-dark color
require('eye-guide.js');
define_key(content_buffer_normal_keymap, 'space', 'eye-guide-scroll-down');
define_key(content_buffer_normal_keymap, 'back_space', 'eye-guide-scroll-up');

// Let duckduckgo be the default homepage
homepage = 'http://www.duckduckgo.com';

// Enable auto completion in the minibuffer
minibuffer_auto_complete_default = true;
url_completion_use_history = true;
url_completion_use_bookmarks = true;

add_hook('window_before_close_hook',
         function (w) {
             var result = yield w.minibuffer.read_single_character_option(
                 $prompt = 'Close window? (y/n)',
                 $options = ['y', 'n']);
             yield co_return(result == 'y');

         });

define_webjump('conk',  'http://conkeror.org');
define_webjump('efu',   'http://emacs-fu.blogspot.com');
define_webjump('ew',    'http://emacswiki.org');
define_webjump('so',    'http://stackoverflow.com/search?q=%s');
define_webjump('yts',   'http://www.youtube.com/results?search_query=%s&aq=f');

interactive('copy-url',
        "Copy the current buffer's URL to the clipboard",
        function(I) {
            var text = I.window.buffers.current.document.location.href;
            writeToClipboard(text);
            I.window.minibuffer.message('copied: ' + text);
        }
);

define_key(default_global_keymap, 'C-c u', 'copy-url');

// Open urls opened remotely in new buffer
url_remoting_fn = load_url_in_new_buffer;

// Resurrect last killed buffer [http://conkeror.org/Tips#Revive_Buffer_.28Undo_closed_tab.29]
var kill_buffer_original = kill_buffer_original || kill_buffer;

var killed_buffer_urls = [];
var killed_buffer_histories = [];

//  remember_killed_buffer
kill_buffer = function (buffer, force) {
    var hist = buffer.web_navigation.sessionHistory;

    if (buffer.display_uri_string && hist) {
        killed_buffer_histories.push(hist);
        killed_buffer_urls.push(buffer.display_uri_string);
    }

    kill_buffer_original(buffer,force);
};

interactive('revive-buffer',
            'Loads url from a previously killed buffer',
            function restore_killed_buffer (I) {
                if (killed_buffer_urls.length !== 0) {
                    var url = yield I.minibuffer.read(
                        $prompt = 'Restore killed url:',
                        $completer = new all_word_completer($completions = killed_buffer_urls),
                        $default_completion = killed_buffer_urls[killed_buffer_urls.length - 1],
                        $auto_complete = 'url',
                        $auto_complete_initial = true,
                        $auto_complete_delay = 0,
                        $require_match = true);

                    var window = I.window;
                    var creator = buffer_creator(content_buffer);
                    var idx = killed_buffer_urls.indexOf(url);

                    // Create the buffer
                    var buf = creator(window, null);

                    // Recover the history
                    buf.web_navigation.sessionHistory = killed_buffer_histories[idx];

                    // This line may seem redundant, but it's necessary.
                    var original_index = buf.web_navigation.sessionHistory.index;
                    buf.web_navigation.gotoIndex(original_index);

                    // Focus the new tab
                    window.buffers.current = buf;

                    // Remove revived from cemitery
                    killed_buffer_urls.splice(idx,1);
                    killed_buffer_histories.splice(idx,1);
                } else {
                    I.window.minibuffer.message('No killed buffer urls');
                }
            });

define_key(default_global_keymap, 'C-T', 'revive-buffer');

interactive('find-url-from-history',
            'Find a page from history in the current buffer',
            'find-url',
            $browser_object = browser_object_history_url);

define_key(content_buffer_normal_keymap, 'h', 'find-url-from-history');

interactive('find-url-from-history-new-buffer',
            'Find a page from history in the current buffer',
            'find-url-new-buffer',
            $browser_object = browser_object_history_url);

define_key(content_buffer_normal_keymap, 'H', 'find-url-from-history-new-buffer');
